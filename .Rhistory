cat("\nGender:", g, "\n")
cat("Mean:", mean(group_age), "\n")
cat("Median:", median(group_age), "\n")
cat("Mode:", get_mode(group_age), "\n")
}
cat("\nSpread of Age by Gender:\n")
for (g in unique(data$Gender)) {
group_age <- data$Age[data$Gender == g]
cat("\nGender:", g, "\n")
cat("Range:", range(group_age), "\n")
cat("IQR:", IQR(group_age), "\n")
cat("Variance:", var(group_age), "\n")
cat("Standard Deviation:", sd(group_age), "\n")
}
cat("\nCentral Tendencies of Age by Heart Rate:\n")
for (hr in unique(data$Heart_Rate)) {
group_age <- data$Age[data$Heart_Rate == hr]
cat("\nHeart Rate:", hr, "\n")
cat("Mean:", mean(group_age), "\n")
cat("Median:", median(group_age), "\n")
cat("Mode:", get_mode(group_age), "\n")
}
cat("\nBloodPressure Stats:\n")
cat("Mean:", mean(data$BloodPressure), "\n")
cat("Median:", median(data$BloodPressure), "\n")
cat("Mode:", get_mode(data$BloodPressure), "\n")
cat("Range:", range(data$BloodPressure), "\n")
cat("IQR:", IQR(data$BloodPressure), "\n")
cat("Variance:", var(data$BloodPressure), "\n")
cat("Standard Deviation:", sd(data$BloodPressure), "\n")
cat("\nCholesterol Stats:\n")
cat("Mean:", mean(data$Cholesterol), "\n")
cat("Median:", median(data$Cholesterol), "\n")
cat("Mode:", get_mode(data$Cholesterol), "\n")
cat("Range:", range(data$Cholesterol), "\n")
cat("IQR:", IQR(data$Cholesterol), "\n")
cat("Variance:", var(data$Cholesterol), "\n")
cat("Standard Deviation:", sd(data$Cholesterol), "\n")
cat("\nQuantumPatternFeature Stats:\n")
cat("Mean:", mean(data$QuantumPatternFeature), "\n")
cat("Median:", median(data$QuantumPatternFeature), "\n")
cat("Mode:", get_mode(data$QuantumPatternFeature), "\n")
cat("Range:", range(data$QuantumPatternFeature), "\n")
cat("IQR:", IQR(data$QuantumPatternFeature), "\n")
cat("Variance:", var(data$QuantumPatternFeature), "\n")
cat("Standard Deviation:", sd(data$QuantumPatternFeature), "\n")
model <- glm(HeartDisease ~ Age + BloodPressure + Cholesterol + Gender,
data = data, family = "binomial")
data$Risk_Score <- predict(model, type = "response")
data <- data %>%
mutate(
Risk_type = cut(Risk_Score,
breaks = quantile(Risk_Score, probs = seq(0, 1, 0.2)),
labels = c("1", "2", "3", "4", "5"),
include.lowest = TRUE)
)
write.csv(data, "revised_dataset/Analyzed_dataset.csv")
View(data)
ggplot(data, aes(x = Risk_type, fill = Gender)) +
geom_bar(position = "dodge") +
labs(
title = "Risk Level Distribution by Gender",
subtitle = "Higher numbers indicate greater risk",
x = "Risk Level",
y = "Count",
fill = "Gender"
) +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#00BFC4")) +
theme_minimal() +
theme(legend.position = "top")
ggplot(data, aes(x = Risk_type, fill = Gender)) +
geom_bar(position = "dodge") +
labs(
title = "Risk Level Distribution by Gender",
subtitle = "Higher numbers indicate greater risk",
x = "Risk Level",
y = "Count",
fill = "Gender"
) +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#00BFC4")) +
theme_minimal() +
theme(legend.position = "top")
ggplot(data, aes(x = Risk_type, fill = Risk_type)) +
geom_bar() +
labs(title = "Distribution of Risk Type", x = "Risk Level", y = "Count") +
scale_fill_brewer(palette = "YlOrRd") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
write.csv(data, "revised_dataset/categorical_dataset.csv")
View(data)
str(data)
summary(data)
cat("Class distribution (HeartDisease):\n")
print(table(data$HeartDisease))
if (length(unique(data$HeartDisease)) == 2) {
data$HeartDisease <- as.factor(data$HeartDisease)
balanced_data <- upSample(x = data[, -which(names(data) == "HeartDisease")],
y = data$HeartDisease,
yname = "HeartDisease")
data <- balanced_data
data$HeartDisease <- as.numeric(as.character(data$HeartDisease))
}
cat("\nData Balanced where data increase from 151 to 174\n")
write.csv(data,"revised_dataset/balanced_dataset.csv")
View(data)
ggplot(data, aes(x = Risk_type, fill = Gender)) +
geom_bar(position = "dodge") +
labs(
title = "Risk Level Distribution by Gender",
subtitle = "Higher numbers indicate greater risk",
x = "Risk Level",
y = "Count",
fill = "Gender"
) +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#00BFC4")) +
theme_minimal() +
theme(legend.position = "top")
if(dir.exists("Visualization")) print("Diretory Exist")
if (!dir.exists("Visualization")) if (dir.create("Visualization")) print("New directory created")
data <- read.csv("revised_dataset/categorical_dataset.csv")
ggplot(data, aes(x = factor(Gender), fill = Gender)) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(title = "Age Distribution by Gender",
x = "Gender",
y = "Count") +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#00BFC4")) +
theme_minimal() +
theme(legend.position = "top",
plot.title = element_text(hjust = 0.5))
data <- read.csv("revised_dataset/categorical_dataset.csv")
ggplot(data, aes(x = factor(Gender), fill = Gender)) +
geom_bar(aes(fill = Gender), position = "dodge") +
labs(title = "Age Distribution by Gender",
x = "Gender",
y = "Count") +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#00BFC4")) +
theme_minimal() +
theme(legend.position = "top",
plot.title = element_text(hjust = 0.5))
library(gridExtra)
library(ggplot2)
install.packages("gridExtra")
library(ggplot2)
library(gridExtra)
library(ggplot2)
library(gridExtra)
data <- read.csv("dataset/original_dataset.csv")
library(ggplot2)
library(gridExtra)
data <- read.csv("Dataset/original_dataset.csv")
data <- read.csv("Dataset/original_dataset.csv")
library(readxl)
data <- read.csv("Dataset/original_dataset.csv")
library(ggplot2)
library(gridExtra)
library(readxl)
data <- read_excel("Dataset/original_dataset.xlsx")
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
# Function to create boxplot for each numeric column
create_boxplot <- function(col_name) {
ggplot(data, aes(y = .data[[col_name]])) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Outliers in", col_name),
y = col_name) +
theme_minimal()
}
# Create list of plots
outlier_plots <- lapply(numeric_cols, create_boxplot)
# Arrange plots in grid
grid_plots <- do.call(grid.arrange, c(outlier_plots, ncol = 2))
# Save the plots
ggsave("revised_dataset/outlier_plots.png", grid_plots, width = 10, height = 8)
library(ggplot2)
library(gridExtra)
library(readxl)
data <- read_excel("Dataset/original_dataset.xlsx")
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
# Function to create boxplot for each numeric column
create_boxplot <- function(col_name) {
ggplot(data, aes(y = .data[[col_name]])) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Outliers in", col_name),
y = col_name) +
theme_minimal()
}
# Create list of plots
outlier_plots <- lapply(numeric_cols, create_boxplot)
# Arrange plots in grid
grid_plots <- do.call(grid.arrange, c(outlier_plots, ncol = 2))
# Save the plots
ggsave("Visualization/outlier_plots.png", grid_plots, width = 10, height = 8)
library(ggplot2)
# Load data
data <- read.csv("revised_dataset/categorical_dataset.csv")
# Ensure Gender is properly formatted as factor
if(!is.factor(data$Gender)) {
data$Gender <- factor(data$Gender,
levels = c(0, 1),
labels = c("Female", "Male"))
}
# Age by Gender Bar Chart
ggplot(data, aes(x = Gender, fill = Gender)) +
geom_bar() +
labs(title = "Age Distribution by Gender",
x = "Gender",
y = "Count") +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#00BFC4")) +
theme_minimal() +
theme(legend.position = "top",
plot.title = element_text(hjust = 0.5))
# Save the plot
ggsave("revised_dataset/age_gender_barchart.png", width = 8, height = 6)
library(ggplot2)
data <- read.csv("Dataset/original_dataset.xlxs")
library(ggplot2)
data <- read.csv("Dataset/original_dataset.xlsx")
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
create_outlier_plot <- function(data, col_name) {
outliers <- mark_outliers(data[[col_name]])
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = diff(range(data[[col_name]]))/20,
fill = "skyblue", color = "black") +
geom_point(data = data[outliers, ],
aes(y = 0), color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
plot = p, width = 8, height = 6)
}
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
lapply(numeric_cols, function(col) create_outlier_plot(data, col))
library(ggplot2)
data <- read.csv("Dataset/original_dataset.xlsx")
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
create_outlier_plot <- function(data, col_name) {
outliers <- mark_outliers(data[[col_name]])
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = diff(range(data[[col_name]]))/20,
fill = "skyblue", color = "black") +
geom_point(data = data[outliers, ],
aes(y = 0), color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
plot = p, width = 8, height = 6)
}
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
lapply(numeric_cols, function(col) create_outlier_plot(data, col))
library(ggplot2)
data <- read_excel("Dataset/original_dataset.xlsx")
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
create_outlier_plot <- function(data, col_name) {
outliers <- mark_outliers(data[[col_name]])
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = diff(range(data[[col_name]]))/20,
fill = "skyblue", color = "black") +
geom_point(data = data[outliers, ],
aes(y = 0), color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
plot = p, width = 8, height = 6)
}
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
lapply(numeric_cols, function(col) create_outlier_plot(data, col))
library(ggplot2)
library(readxl)
# Load data properly
data <- read_excel("Dataset/original_dataset.xlsx")
# Create directory if it doesn't exist
if(!dir.exists("Visualization")) dir.create("Visualization")
# Function to detect outliers
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
# Function to create and save outlier plots
create_outlier_plot <- function(data, col_name) {
# Calculate range safely
col_range <- range(data[[col_name]], na.rm = TRUE)
bin_width <- diff(col_range)/20
# Create plot
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = bin_width,
fill = "skyblue", color = "black") +
geom_point(data = data.frame(x = data[[col_name]][mark_outliers(data[[col_name]])],
aes(x = x, y = 0),
color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
library(ggplot2)
library(readxl)
# Load data properly
data <- read_excel("Dataset/original_dataset.xlsx")
# Create directory if it doesn't exist
if(!dir.exists("Visualization")) dir.create("Visualization")
# Function to detect outliers
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
create_outlier_plot <- function(data, col_name) {
col_range <- range(data[[col_name]], na.rm = TRUE)
bin_width <- diff(col_range)/20
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = bin_width,
fill = "skyblue", color = "black") +
geom_point(data = data.frame(x = data[[col_name]][mark_outliers(data[[col_name]])],
aes(x = x, y = 0),
color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
library(ggplot2)
library(readxl)
# Load data properly
data <- read_excel("Dataset/original_dataset.xlsx")
# Create directory if it doesn't exist
if(!dir.exists("Visualization")) dir.create("Visualization")
# Function to detect outliers
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
# Function to create and save outlier plots
create_outlier_plot <- function(data, col_name) {
# Calculate range safely
col_range <- range(data[[col_name]], na.rm = TRUE)
bin_width <- diff(col_range)/20
# Create data frame for outliers
outlier_data <- data.frame(
x = data[[col_name]][mark_outliers(data[[col_name]])],
y = 0
)
# Create plot
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = bin_width,
fill = "skyblue", color = "black") +
geom_point(data = outlier_data,
aes(x = x, y = y),
color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
plot = p, width = 8, height = 6)
}
# Generate plots for each numeric column
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
lapply(numeric_cols, function(col) {
if(col %in% names(data)) {
create_outlier_plot(data, col)
} else {
warning(paste("Column", col, "not found in dataset"))
}
})
library(ggplot2)
library(readxl)
# Load data properly
data <- read_excel("Dataset/original_dataset.xlsx")
# Create directory if it doesn't exist
if(!dir.exists("Visualization")) dir.create("Visualization")
# Function to detect outliers
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
create_outlier_plot <- function(data, col_name) {
col_range <- range(data[[col_name]], na.rm = TRUE)
bin_width <- diff(col_range)/20
# Create plot
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = bin_width,
fill = "skyblue", color = "black") +
geom_point(data = data.frame(x = data[[col_name]][mark_outliers(data[[col_name]])],
aes(x = x, y = 0),
color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Save plot
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
library(ggplot2)
data <- read_excel("Dataset/original_dataset.xlsx")
mark_outliers <- function(x) {
qnt <- quantile(x, probs = c(0.25, 0.75), na.rm = TRUE)
iqr <- IQR(x, na.rm = TRUE)
lower <- qnt[1] - 1.5 * iqr
upper <- qnt[2] + 1.5 * iqr
x < lower | x > upper
}
create_outlier_plot <- function(data, col_name) {
outliers <- mark_outliers(data[[col_name]])
p <- ggplot(data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = diff(range(data[[col_name]]))/20,
fill = "skyblue", color = "black") +
geom_point(data = data[outliers, ],
aes(y = 0), color = "red", size = 3, shape = 4) +
labs(title = paste("Outliers in", col_name),
x = col_name,
y = "Frequency") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
ggsave(paste0("Visualization/outliers_", col_name, ".png"),
plot = p, width = 8, height = 6)
}
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
lapply(numeric_cols, function(col) create_outlier_plot(data, col))
library(ggplot2)
library(gridExtra)
library(readxl)
data <- read_excel("Dataset/original_dataset.xlsx")
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
create_boxplot <- function(col_name) {
ggplot(data, aes(y = .data[[col_name]])) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Outliers in", col_name),
y = col_name) +
theme_minimal()
}
outlier_plots <- lapply(numeric_cols, create_boxplot)
grid_plots <- do.call(grid.arrange, c(outlier_plots, ncol = 2))
ggsave("Visualization/outlier_plots.png", grid_plots, width = 10, height = 8)
library(ggplot2)
# Load data
data <- read.csv("revised_dataset/categorical_dataset.csv")
# Ensure Gender is properly formatted as factor
if(!is.factor(data$Gender)) {
data$Gender <- factor(data$Gender,
levels = c(0, 1),
labels = c("Female", "Male"))
}
# Age by Gender Bar Chart
ggplot(data, aes(x = Gender, fill = Gender)) +
geom_bar() +
labs(title = "Age Distribution by Gender",
x = "Gender",
y = "Count") +
scale_fill_manual(values = c("Female" = "#F8766D", "Male" = "#00BFC4")) +
theme_minimal() +
theme(legend.position = "top",
plot.title = element_text(hjust = 0.5))
# Save the plot
ggsave("Visualization/age_gender_barchart.png", width = 8, height = 6)
library(ggplot2)
library(gridExtra)
library(readxl)
data <- read_excel("Dataset/original_dataset.xlsx")
numeric_cols <- c("Age", "BloodPressure", "Cholesterol", "QuantumPatternFeature")
create_boxplot <- function(col_name) {
ggplot(data, aes(y = .data[[col_name]])) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = paste("Outliers in", col_name),
y = col_name) +
theme_minimal()
}
outlier_plots <- lapply(numeric_cols, create_boxplot)
grid_plots <- do.call(grid.arrange, c(outlier_plots, ncol = 2))
ggsave("Visualization/outlier_plots.png", grid_plots, width = 10, height = 8)
